package service

import (
	"context"

	"github.com/suttapak/starter/errs"
	"github.com/suttapak/starter/helpers"
	"github.com/suttapak/starter/internal/filter"
	"github.com/suttapak/starter/internal/repository"
	"github.com/suttapak/starter/logger"
)

type (
	{{ .UpperName }} interface {
		Get{{ .UpperName }}(ctx context.Context, id uint) (*{{ .UpperName }}Response, error)
		Get{{ .UpperName }}s(ctx context.Context, pg *helpers.Pagination, f *filter.{{ .UpperName }}Filter) ([]{{ .UpperName }}Response, error)
		Create{{ .UpperName }}(ctx context.Context, input *Create{{ .UpperName }}Request) error
		Update{{ .UpperName }}(ctx context.Context, id uint, input *Update{{ .UpperName }}Request) error
		Delete{{ .UpperName }}(ctx context.Context, id uint) error
	}
	{{ .LowerName }} struct {
		logger            	logger.AppLogger
		helper            	helpers.Helper
		{{ .LowerName }} 	repository.{{ .UpperName }}
		db 				repository.DatabaseTransaction
	}

	Create{{ .UpperName }}Request struct {
		// Add field here
	}
	Update{{ .UpperName }}Request struct {
		// Add field here
	}

	{{ .UpperName }}Response struct {
		// Add field here
	}
)


func (i *{{ .LowerName }}) Get{{ .UpperName }}(ctx context.Context, id uint) (*{{ .UpperName }}Response, error) {
	model ,err := i.{{ .LowerName }}.FindById(ctx,nil, id)
	if err != nil {
		i.logger.Error(err)
		return nil, errs.HandleGorm(err)
	}
	var res {{ .UpperName }}Response
	if err := i.helper.ParseJson(model, &res); err != nil {
		return nil, errs.ErrInvalid
	}
	return &res, nil
}


func (i *{{ .LowerName }}) Get{{ .UpperName }}s(ctx context.Context, pg *helpers.Pagination, f *filter.{{ .UpperName }}Filter) ([]{{ .UpperName }}Response, error) {
	models, err := i.{{ .LowerName }}.FindAll(ctx,nil, pg, f)
	if err != nil {
		i.logger.Error(err)
		return nil, errs.HandleGorm(err)
	}
	var res []{{ .UpperName }}Response
	if err := i.helper.ParseJson(models, &res); err != nil {
		return nil, errs.ErrInvalid
	}
	return res, nil
}

func (i *{{ .LowerName }}) Create{{ .UpperName }}(ctx context.Context, input *Create{{ .UpperName }}Request) error {
	body := repository.Create{{ .UpperName }}Request(*input)
	if err := i.{{ .LowerName }}.Create(ctx,nil, &body); err != nil {
		i.logger.Error(err)
		return errs.HandleGorm(err)
	}
	return nil
}
func (i *{{ .LowerName }}) Update{{ .UpperName }}(ctx context.Context, id uint, input *Update{{ .UpperName }}Request) error {
	body := repository.Update{{ .UpperName }}Request(*input)
	if err := i.{{ .LowerName }}.Save(ctx,nil, id, &body); err != nil {
		i.logger.Error(err)
		return errs.HandleGorm(err)
	}
	return nil
}
func (i *{{ .LowerName }}) Delete{{ .UpperName }}(ctx context.Context, id uint) error {
	if err := i.{{ .LowerName }}.DeleteById(ctx,nil, id); err != nil {
		i.logger.Error(err)
		return errs.HandleGorm(err)
	}
	return nil
}

func New{{ .UpperName }}(
	logger logger.AppLogger,
	helper helpers.Helper,
	{{ .LowerName }}Repo 	repository.{{ .UpperName }},
	db 	repository.DatabaseTransaction,
) {{ .UpperName }} {
	return &{{ .LowerName }}{
		logger: logger,
		helper: helper,
		{{ .LowerName }}:{{ .LowerName }}Repo,
		db:db,
	}
}
