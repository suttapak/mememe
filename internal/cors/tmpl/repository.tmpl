package repository

import (
	"context"

	"github.com/suttapak/starter/helpers"
	"github.com/suttapak/starter/internal/filter"
	"github.com/suttapak/starter/internal/model"
	"gorm.io/gorm"

)

type (
	{{ .UpperName }} interface {
		FindById(ctx context.Context,tx *gorm.DB, id uint) (*model.{{ .UpperName }}, error)
		FindAll(ctx context.Context,tx *gorm.DB, pg *helpers.Pagination, f *filter.{{ .UpperName }}Filter) ([]model.{{ .UpperName }}, error)
		Create(ctx context.Context,tx *gorm.DB, m *Create{{ .UpperName }}Request) error
		Save(ctx context.Context,tx *gorm.DB, id uint, m *Update{{ .UpperName }}Request) error
		DeleteById(ctx context.Context,tx *gorm.DB, id uint) error
	}

	Create{{ .UpperName }}Request struct {
	}

	Update{{ .UpperName }}Request struct {
	}

	{{ .LowerName }} struct {
		db *gorm.DB
	}
)

func (i *{{ .LowerName }}) FindById(ctx context.Context,tx *gorm.DB, id uint) (*model.{{ .UpperName }}, error) {
	if tx == nil {
		tx = i.db
	}
	var res model.{{ .UpperName }}
	err := tx.Where("id = ?", id).First(&res).Error
	return &res, err
}

func (i *{{ .LowerName }}) FindAll(ctx context.Context,tx *gorm.DB, pg *helpers.Pagination, f *filter.{{ .UpperName }}Filter) ([]model.{{ .UpperName }}, error) {
	if tx == nil {
		tx = i.db
	}
	var res []model.{{ .UpperName }}
	tx = tx.Model(&model.{{ .UpperName }}{}).Count(&pg.Count)
	helpers.Paging(pg)
	err := tx.Offset(pg.Offset).Limit(pg.Limit).Find(&res).Error	
	return res, err
}

func (i *{{ .LowerName }}) Create(ctx context.Context,tx *gorm.DB, m *Create{{ .UpperName }}Request) error {
	if tx == nil {
		tx = i.db
	}
	input := model.{{ .UpperName }}{}
	err := tx.Create(&input).Error
	return err
}

func (i *{{ .LowerName }}) Save(ctx context.Context,tx *gorm.DB, id uint, m *Update{{ .UpperName }}Request) error {
	if tx == nil {
		tx = i.db
	}
	input := model.{{ .UpperName }}{}
	err := tx.Model(&model.{{ .UpperName }}{}).Where("id = ?", id).Updates(&input).Error
	return err
}

func (i *{{ .LowerName }}) DeleteById(ctx context.Context,tx *gorm.DB, id uint) error {
	if tx == nil {
		tx = i.db
	}
	input := model.{{ .UpperName }}{}
	err := tx.Where("id = ?", id).Delete(&input).Error
	return err
}

func New{{ .UpperName }}(db *gorm.DB) {{ .UpperName }} {
	return &{{ .LowerName }}{
		db: db,
	}
}
